Array is a linear data structure that is a collection of data elements of same types. 
Arrays are stored in contiguous memory locations. It is a static data structure with a fixed size.

 ** Applications of Array Data Structure:

 - Arrays mainly have advantages like random access and cache friendliness over other data structures that make them useful.

 - Below are some applications of arrays.

 + Storing and accessing data: Arrays store elements in a specific order and allow constant-time O(1) access to any element.

 + Searching: If data in array is sorted, we can search an item in O(log n) time. We can also find floor(), ceiling(), kth smallest, kth largest, etc efficiently.

 + Matrices: Two-dimensional arrays are used for matrices in computations like graph algorithms and image processing.

 + Implementing other data structures: Arrays are used as the underlying data structure for implementing stacks and queues.

 + Dynamic programming: Dynamic programming algorithms often use arrays to store intermediate results of subproblems in order to solve a larger problem.

 + Data Buffers: Arrays serve as data buffers and queues, temporarily storing incoming data like network packets, file streams, and database results before processing.


 ** Advantages of Array Data Structure:

 + Efficient and Fast Access: Arrays allow direct and efficient access to any element in the collection with constant access time, as the data is stored in contiguous memory locations.

 + Memory Efficiency: Arrays store elements in contiguous memory, allowing efficient allocation in a single block and reducing memory fragmentation.

 + Versatility: Arrays can be used to store a wide range of data types, including integers, floating-point numbers, characters, and even complex data structures such as objects and 
 pointers.

 + Compatibility with hardware: The array data structure is compatible with most hardware architectures, making it a versatile tool for programming in a wide range of environments.


 ** Disadvantages of Array Data Structure:

 + Fixed Size: Arrays have a fixed size set at creation. Expanding an array requires creating a new one and copying elements, which is time-consuming and memory-intensive.

 + Memory Allocation Issues: Allocating large arrays can cause memory exhaustion, leading to crashes, especially on systems with limited resources.

 + Insertion and Deletion Challenges: Adding or removing elements requires shifting subsequent elements, making these operations inefficient.

 + Limited Data Type Support: Arrays support only elements of the same type, limiting their use with complex data types.

 + Lack of Flexibility: Fixed size and limited type support make arrays less adaptable than structures like linked lists or trees.